Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size() == 0)return 0;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> v(m, vector<int>(n, 0));
        int mx = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                mx = max(mx, longestIncreasingPathHelper(matrix, v, i, j));
            }
        }
        return mx;
    }
    
    int longestIncreasingPathHelper(vector<vector<int>>& matrix, vector<vector<int>>& v, int i, int j) {
        int c = 1;
        int mx = 1;
        if(v[i][j] != 0)return v[i][j];
        if(i != 0 && matrix[i-1][j] > matrix[i][j]) {
            c = 1+longestIncreasingPathHelper(matrix, v, i-1, j);
            mx = max(mx, c);
        }
        if(i != matrix.size()-1 && matrix[i+1][j] > matrix[i][j]) {
            c = 1+longestIncreasingPathHelper(matrix, v, i+1, j);
            mx = max(mx, c);
        }
        if(j != 0 && matrix[i][j-1] > matrix[i][j]) {
            c = 1+longestIncreasingPathHelper(matrix, v, i, j-1);
            mx = max(mx, c);
        }
        if(j != matrix[0].size()-1 && matrix[i][j+1] > matrix[i][j]) {
            c = 1+longestIncreasingPathHelper(matrix, v, i, j+1);
            mx = max(mx, c);
        }
        v[i][j] = mx;
        return mx;
    }    
};
