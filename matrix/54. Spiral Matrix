Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size() == 0)return {};
        int u = 0;
        int d = matrix.size()-1;
        int l = 0;
        int r = matrix[0].size()-1;
        vector<int> ans;
        helper(matrix, ans, u, d, l, r, 0, 0, 0);
        return ans;
    }
    
    void helper(vector<vector<int>>& matrix, vector<int>& ans, int u, int d, int l, int r, int i, int j, int a) {
        ans.push_back(matrix[i][j]);
        switch(a) {
            case 0 :
                if(j != r) {
                    j++;
                    helper(matrix, ans, u, d, l, r, i, j, 0);
                }
                else {
                    if(i == d)return;
                    u++;
                    i++;
                    helper(matrix, ans, u, d, l, r, i, j, 1);
                }
                break;
            case 1 :
                if(i != d) {
                    i++;
                    helper(matrix, ans, u, d, l, r, i, j, 1);
                }
                else {
                    if(j == l)return;
                    r--;
                    j--;
                    helper(matrix, ans, u, d, l, r, i, j, 2);
                }
                break;
            case 2 :
                if(j != l) {
                    j--;
                    helper(matrix, ans, u, d, l, r, i, j, 2);
                }
                else {
                    if(i == u)return;
                    d--;
                    i--;
                    helper(matrix, ans, u, d, l, r, i, j, 3);
                }
                break;
            case 3 :
                if(i != u) {
                    i--;
                    helper(matrix, ans, u, d, l, r, i, j, 3);
                }
                else {
                    if(j == r)return;
                    l++;
                    j++;
                    helper(matrix, ans, u, d, l, r, i, j, 0);
                }
                break;
            default :
                break;
        }
    }
};
