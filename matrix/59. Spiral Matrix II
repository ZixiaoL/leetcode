Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        if(n == 0)return {};
        int u = 0;
        int d = n-1;
        int l = 0;
        int r = n-1;
        vector<vector<int>> ans(n, vector<int>(n, 0));
        helper(ans, u, d, l, r, 0, 0, 0, 1);
        return ans;
    }
    
    void helper(vector<vector<int>>& ans, int u, int d, int l, int r, int i, int j, int a, int v) {
        ans[i][j] = v++;
        switch(a) {
            case 0 :
                if(j != r) {
                    j++;
                    helper(ans, u, d, l, r, i, j, 0, v);
                }
                else {
                    if(i == d)return;
                    u++;
                    i++;
                    helper(ans, u, d, l, r, i, j, 1, v);
                }
                break;
            case 1 :
                if(i != d) {
                    i++;
                    helper(ans, u, d, l, r, i, j, 1, v);
                }
                else {
                    if(j == l)return;
                    r--;
                    j--;
                    helper(ans, u, d, l, r, i, j, 2, v);
                }
                break;
            case 2 :
                if(j != l) {
                    j--;
                    helper(ans, u, d, l, r, i, j, 2, v);
                }
                else {
                    if(i == u)return;
                    d--;
                    i--;
                    helper(ans, u, d, l, r, i, j, 3, v);
                }
                break;
            case 3 :
                if(i != u) {
                    i--;
                    helper(ans, u, d, l, r, i, j, 3, v);
                }
                else {
                    if(j == r)return;
                    l++;
                    j++;
                    helper(ans, u, d, l, r, i, j, 0, v);
                }
                break;
            default :
                break;
        }
    }
};
