Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

//自写递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root)return ans;
        helper(root, 0, ans);
        return ans;
    }
    void helper(TreeNode* root, int i, vector<vector<int>> &ans){
        if(ans.size() <= i){
            vector<int> a;
            ans.push_back(a);
        }
        ans[i].push_back(root->val);
        if(root->left)helper(root->left, i+1, ans);
        if(root->right)helper(root->right, i+1, ans);
    }
};

//bfs
https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/197348/Python-or-BFS-Queue-tm-(102)
