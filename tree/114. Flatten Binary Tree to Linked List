Given a binary tree, flatten it to a linked list in-place.

//自写递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root)return;
        if(!root->left && !root->right)return;
        else if(!root->right){
            root->right = root->left;
            root->left = NULL;
            flatten(root->right);
        }
        else if(!root->left)flatten(root->right);
        else{
            TreeNode* t = root->left;
            while(t->right != NULL)t = t->right;
            t->right = root->right;
            root->right = NULL;
            flatten(root);
        }
    }
};

//
void flatten(TreeNode *root) {
	while (root) {
		if (root->left && root->right) {
			TreeNode* t = root->left;
			while (t->right)
				t = t->right;
			t->right = root->right;
		}

        if(root->left)
		    root->right = root->left;
		root->left = NULL;
		root = root->right;
	}
}

//
private TreeNode prev = null;

public void flatten(TreeNode root) {
    if (root == null)
        return;
    flatten(root.right);
    flatten(root.left);
    root.right = prev;
    root.left = null;
    prev = root;
}
