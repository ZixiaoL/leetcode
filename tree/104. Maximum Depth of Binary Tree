Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
Note: A leaf is a node with no children.

//自写递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root) return 0;
        if(!root->left) return 1 + maxDepth(root->right);
        if(!root->right) return 1 + maxDepth(root->left);
        return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};

//bfs
    int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        if(!root->right && !root->left) return 1;
        int res=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            res++;
            for(int i=0;i<size;i++){
                root=q.front();
                q.pop();
                if(root->left) q.push(root->left);
                if(root->right) q.push(root->right);
            }
        }
        return res;
    }
