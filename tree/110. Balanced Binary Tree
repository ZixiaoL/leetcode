Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


//
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        int height = 0;
        return checkBalance(root, height);
    }
    
    bool checkBalance(TreeNode* root, int& height) {
        if (root == NULL) {
            height = 0;
            return true;
        }
        int leftHeight = 0;
        int rightHeight = 0;
        if (!checkBalance(root->left, leftHeight)) return false;
        if (!checkBalance(root->right, rightHeight)) return false;
        if ( abs(leftHeight - rightHeight) > 1 ) return false;
        height = max(leftHeight, rightHeight) + 1;
        return true;
    }
};

https://leetcode.com/problems/balanced-binary-tree/discuss/157645/Python-Tree-tm
