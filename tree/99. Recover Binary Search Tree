Two elements of a binary search tree (BST) are swapped by mistake.
Recover the tree without changing its structure.

//inorder
class Solution {
    TreeNode* first=NULL;
    TreeNode* second=NULL;
    TreeNode* prev = new TreeNode(INT_MIN);
public:
    void recoverTree(TreeNode* root) {
        help(root);
        swp(first->val, second->val);
    }
    
    void help(TreeNode* root){
        if(root==NULL)  return;
        help(root->left);
        if(first==NULL && prev->val > root->val)   first=prev;
        if(first!=NULL && prev->val > root->val)   second=root;
        prev=root;
        help(root->right);
    }
};

//Morris traversal
class Solution {
        TreeNode * wrong_node0 = nullptr, * wrong_node1 = nullptr, * prev = nullptr;
        void verify(TreeNode * cur)
        {
            if (prev != nullptr && prev -> val > cur -> val)
            {
                if (wrong_node0 == nullptr)
                {
                    wrong_node0 = prev;
                    wrong_node1 = cur; // in case the tree has only 2 elements.
                }
                else
                    wrong_node1 = cur;
            }
            prev = cur;
        }
        void morrisInorder(TreeNode * root)
        {
            TreeNode * cur = root;
            while (cur)
            {
                if (cur->left == nullptr)
                {
                    verify(cur);       
                    cur = cur->right;
                    continue;
                }
                TreeNode * pred = cur->left;
                while (pred -> right != nullptr && pred -> right != cur)
                    pred = pred -> right; //finding predecessor
                if (pred -> right == nullptr)
                {
                    pred -> right = cur;
                    cur = cur -> left;
                }else {//pred -> right == cur;
                    pred -> right = nullptr;
                    verify(cur);
                    cur = cur -> right;
                }
            }
        }
    public:
        void recoverTree(TreeNode* root) {
            morrisInorder(root);
            swap(wrong_node0->val, wrong_node1->val);
        }
    };
