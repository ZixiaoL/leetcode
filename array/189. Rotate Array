//Given an array, rotate the array to the right by k steps, where k is non-negative.

//Approach #1 Brute Force [Time Limit Exceeded]
//O(n*k)，O(1)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int temp;
        int pre;
        int size = nums.size();
        for(int i = 0; i < k; i++){
            pre = nums[size-1];
            for(int j = 0; j < size; j++){
                temp = nums[j];
                nums[j] = pre;
                pre = temp;
            }
        }
    }
};

//Approach #2 Using Extra Array [Accepted]
//O(n)，O(n)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int size = nums.size();
        vector<int> a(size);
        for(int i = 0; i < size; i++){
            a[(i+k)%size] = nums[i];//用余数处理右移，很精妙
        }
        for(int i = 0; i < size; i++){
            nums[i] = a[i];
        }
    }
};

//Approach #3 Using Cyclic Replacements [Accepted]
//O(n)，O(1)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k = k % nums.size();
        int count = 0;
        for (int start = 0; count < nums.size(); start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % nums.size();
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }
    }
};

//Approach #4 Using Reverse [Accepted]
//O(n)，O(1)
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k = k % nums.size();
        rev(nums, 0, nums.size()-1);
        rev(nums, 0, k-1);
        rev(nums, k, nums.size()-1);
    }
    void rev(vector<int>& nums, int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
};
