//Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
//The algorithm should run in linear time and in O(1) space.

//Boyer-Moore Majority Vote algorithm
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int count1 = 0;
        int count2 = 0;
        int candidate1 = 0;
        int candidate2 = 1;
        for (int num : nums) {
            if(candidate1 == num)count1++;
            else if(candidate2 == num)count2++;
            else if(count1 == 0){candidate1 = num;count1 = 1;}
            else if(count2 == 0){candidate2 = num;count2 = 1;}
            else{
                count1--;
                count2--;
            }
        }
        
        vector<int> res;
        int countA = 0;
        int countB = 0;
        for (int num : nums){
            if(num == candidate1)countA++;
            if(num == candidate2)countB++;
        }
        if(countA > nums.size()/3)res.push_back(candidate1);
        if(countB > nums.size()/3)res.push_back(candidate2);
        return res;
    }
};
