//Say you have an array for which the ith element is the price of a given stock on day i.
//If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), 
//design an algorithm to find the maximum profit.
//Note that you cannot sell a stock before you buy one.

//Approach 1: Brute Force(Java)
public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}

//Approach 2: One Pass
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() == 0)return 0;
        int pmax = prices[0];
        int pmin = prices[0];
        int prf = 0;
        for(int i = 1; i < prices.size(); i++){
            if(prices[i] > pmax){
                pmax = prices[i];
                prf = max(prf,pmax-pmin);
            }
            if(prices[i] < pmin){
                pmin = prices[i];
                pmax = prices[i];
            }
        }
        return prf;
    }
};
