//Say you have an array for which the ith element is the price of a given stock on day i.
//Design an algorithm to find the maximum profit. You may complete at most two transactions.
//Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).



//For instance, in the case 3,3,5,0,0,3,1,4:

//the max profit is (4 - 1) + (3 - 0), which is also equal to 4 - (1 - (3 - 0))
//'0' is the min of cost1, (3 - 0) is the profit1, (1 - (3 - 0)) is the cost2, and 4 - (1 - (3 - 0)) is the profit2
//this also works for the increasing sequence, say, 1,2,3,4, the max profit is 4 - (4 - (4 - 1))
//in order to get the max profit eventually, profit1 must be as relatively most as possible to produce a small cost2, 
//and therefore cost2 can be as less as possible to give us the final max profit2. So now we understand why and where we need to 
//take min or max of all cost and profit variables.....
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() <= 1) {
             return 0;
         }
        int cost1 = INT_MAX, cost2 = INT_MAX, profit1 = 0, profit2 = 0;

        for (int price : prices){
            cost1 = min(cost1, price);
            profit1 = max(profit1, price - cost1);
            cost2 = min(cost2, price - profit1);
            profit2 = max(profit2, price - cost2);
        }
        return profit2;
    }
};
