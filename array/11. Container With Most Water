//Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines 
//are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together 
//with x-axis forms a container, such that the container contains the most water.
//Note: You may not slant the container and n is at least 2.

//Approach 1: Brute Force(Java)
public class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0;
        for (int i = 0; i < height.length; i++)
            for (int j = i + 1; j < height.length; j++)
                maxarea = Math.max(maxarea, Math.min(height[i], height[j]) * (j - i));
        return maxarea;
    }
}

//Approach 2: Two Pointer Approach
class Solution {
public:
    int maxArea(vector<int>& height) {
        int size = height.size();
        int lo = 0;
        int hi = size-1;
        int maxarea = 0;
        while(lo < hi){
            maxarea = max(maxarea, min(height[lo],height[hi])*(hi-lo));
            if(lo < hi && height[lo] < height[hi])
                lo++;
            else
                hi--;
        }
        return maxarea;
    }
};
