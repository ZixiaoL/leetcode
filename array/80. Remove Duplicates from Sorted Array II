//Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
//Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

//Two Pointers
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int size = nums.size();
        if(size == 0)return 0;
        int i = 0;
        for(int j = 0; j < size; j++){
            int n = 0;
            while(j+1 < size && nums[j+1]==nums[j]){
                j++;
                n++;
            }
            if(n >= 1){
                nums[i] = nums[j];
                nums[i+1] = nums[j];
                i+=2;
            }
            else{
                nums[i] = nums[j];
                i++;
            }
    }
        return i;
    }
};

//
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.size() <= 2)
            return nums.size();
        int length = 2;
        for (int i = 2; i < nums.size(); ++i)
            if (nums[i] != nums[length - 2])
                nums[length++] = nums[i];
        return length;
    }
};