//Given n non-negative integers representing an elevation map 
//where the width of each bar is 1, compute how much water it is able to trap after raining.

//Approach 1: Brute force
for every element⬅ ➡

//Approach 2: Dynamic Programming
class Solution {
public:
    int trap(vector<int>& height) {
        int w = 0;
        int size = height.size();
        if(size == 0)return 0;
        vector<int> water(size, 0);
        water[0] = height[0];
        water[size-1] = height[size-1];
        for(int i = 1; i < size-1; i++){
            water[i] = max(water[i-1], height[i]);
        }
        for(int j = size-2; j > 0; j--){
            water[j] = min(water[j],max(water[j+1], height[j]));
        }
        for(int k = 0; k < size; k++){
            w += water[k] - height[k];
        }
        return w;
    }
};

//Approach 3: Using stacks
int trap(vector<int>& height)
{
    int ans = 0, current = 0;
    stack<int> st;
    while (current < height.size()) {
        while (!st.empty() && height[current] > height[st.top()]) {
            int top = st.top();
            st.pop();
            if (st.empty())
                break;
            int distance = current - st.top() - 1;
            int bounded_height = min(height[current], height[st.top()]) - height[top];
            ans += distance * bounded_height;
        }
        st.push(current++);
    }
    return ans;
}

//Approach 4: Using 2 pointers
int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}
