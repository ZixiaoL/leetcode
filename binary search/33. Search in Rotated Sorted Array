Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0)return -1;
        int lo = 0;
        int hi = nums.size()-1;
        int mi;
        int r = 0;
        while(lo <= hi){
            mi = lo+((hi-lo)>>1);
            if(nums[0] <= nums[mi]){
                lo = mi+1;
            }
            else if(nums[mi-1] > nums[mi]){
                r = mi;
                break;
            }
            else hi = mi-1;
        }
        lo = 0;
        hi = r-1;
        while(lo <= hi){
            mi = lo+((hi-lo)>>1);
            if(nums[mi] < target)lo = mi+1;
            else if(nums[mi] > target)hi = mi-1;
            else return mi;
        }
        lo = r;
        hi = nums.size()-1;
        while(lo <= hi){
            mi = lo+((hi-lo)>>1);
            if(nums[mi] < target)lo = mi+1;
            else if(nums[mi] > target)hi = mi-1;
            else return mi;
        }
        return -1;
    }
};
