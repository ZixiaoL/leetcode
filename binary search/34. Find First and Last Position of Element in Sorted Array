Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0)return {-1,-1};
        int lo = 0;
        int hi = nums.size()-1;
        int mi;
        vector<int> ans;
        while(lo < hi){
            mi = lo + (hi-lo)/2;
            if(nums[mi] < target)lo = mi+1;
            else hi = mi;
        }
        if(nums[lo] != target)return {-1,-1};
        ans.push_back(lo);
        hi = nums.size()-1;
        while(lo < hi){
            mi = lo + (hi-lo)/2;
            if(nums[mi] == target)lo = mi+1;
            else hi = mi;
        }
        if(lo == nums.size()-1 && nums[lo] == target)ans.push_back(lo);
        else ans.push_back(lo-1);
        return ans;
    }
};

