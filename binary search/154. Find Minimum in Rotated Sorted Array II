Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size() == 0)return 0;
        int lo = 0;
        int hi = nums.size()-1;
        int mi;
        int min = nums[0];
        while(lo < hi){
            mi = lo+((hi-lo)>>1);
            if(nums[lo] == nums[mi] && nums[hi] == nums[mi]){
                lo++;
                hi--;
                min = min>nums[lo]? nums[lo]:min;
            }
            else if(nums[lo] <= nums[mi]){
                lo = mi+1;
                min = min>nums[lo]? nums[lo]:min;
            }
            else hi = mi;
        }
        return min>nums[lo]? nums[lo]:min;      
    }
};

//跟右边比较更好，不用存最小值
class Solution {
public:
    int findMin(vector<int> &num) {
        int lo = 0;
        int hi = num.size() - 1;
        int mid = 0;
        
        while(lo < hi) {
            mid = lo + (hi - lo) / 2;
            
            if (num[mid] > num[hi]) {
                lo = mid + 1;
            }
            else if (num[mid] < num[hi]) {
                hi = mid;
            }
            else { // when num[mid] and num[hi] are same
                hi--;
            }
        }
        return num[lo];
    }
};
