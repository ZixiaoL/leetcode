You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> v;
        vector<int> ans(nums.size(), 0);
        for(int i = nums.size()-1; i >= 0; i--) {
            ans[i] = myinsert(v, nums[i]);
        }
        return ans;
    }
    
    int myinsert(vector<int>& v, int a) {
        int lo = 0;
        int hi = v.size();
        int mi;
        while(lo < hi) {
            mi = lo + (hi-lo)/2;
            if(mi < v.size() && v[mi] < a)lo = mi+1;
            else hi = mi;
        }
        if(lo < v.size())v.insert(v.begin()+lo,a);
        else v.push_back(a);
        return lo;
    }
};


//merge-sort solution
public class Solution {
    class Pair {
        int index;
        int val;
        public Pair(int index, int val) {
            this.index = index;
            this.val = val;
        }
    }
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        Pair[] arr = new Pair[nums.length];
        Integer[] smaller = new Integer[nums.length];
        Arrays.fill(smaller, 0);
        for (int i = 0; i < nums.length; i++) {
            arr[i] = new Pair(i, nums[i]);
        }
        mergeSort(arr, smaller);
        res.addAll(Arrays.asList(smaller));
        return res;
    }
    private Pair[] mergeSort(Pair[] arr, Integer[] smaller) {
        if (arr.length <= 1) {
            return arr;
        }
        int mid = arr.length / 2;
        Pair[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid), smaller);
        Pair[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length), smaller);
        for (int i = 0, j = 0; i < left.length || j < right.length;) {
            if (j == right.length || i < left.length && left[i].val <= right[j].val) {
                arr[i + j] = left[i];
                smaller[left[i].index] += j;
                i++;
            } else {
                arr[i + j] = right[j];
                j++;
            }
        }
        return arr;
    }
}
