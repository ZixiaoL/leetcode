//Given two binary strings, return their sum (also a binary string).
//The input strings are both non-empty and contains only characters 1 or 0.

//
class Solution {
public:
string addBinary(string a, string b) {
	int sizea = a.size();
	int sizeb = b.size();
	bool rise = false;
	string ans;
	if (sizea<sizeb)return addBinary(b, a);
	for (int i = 0;i<sizeb;i++) {
		
		if (a[sizea - i - 1] == '1' && b[sizeb - i - 1] == '1' && rise == false) { ans = "0"+ans;rise = !rise; }
		else if (a[sizea - i - 1] == '1' && b[sizeb - i - 1] == '1' && rise == true) { ans =  "1" + ans; }
		else if (a[sizea - i - 1] == '0' && b[sizeb - i - 1] == '0' && rise == true) { ans =  "1" + ans;rise = !rise; }
		else if (a[sizea - i - 1] == '0' && b[sizeb - i - 1] == '0' && rise == false) { ans =  "0" + ans; }
		else if (rise == false) { ans = "1" + ans; }//其中一个是1另一个是0
		else { ans =  "0" + ans; }
	}
	for (int j = sizeb;j<sizea;j++) {
		if (rise == false)ans = a[sizea - j - 1]+ans;
		else if (a[sizea - j - 1] == '1')ans= "0" + ans;
		else { ans = "1" + ans;rise = !rise; }
	}
	if (rise == true)ans = "1" + ans;
	return ans;
}
};

//进位器
class Solution
{
public:
    string addBinary(string a, string b)
    {
        string s = "";
        
        int c = 0, i = a.size() - 1, j = b.size() - 1;
        while(i >= 0 || j >= 0 || c == 1)
        {
            c += i >= 0 ? a[i --] - '0' : 0;
            c += j >= 0 ? b[j --] - '0' : 0;
            s = char(c % 2 + '0') + s;
            c /= 2;
        }
        
        return s;
    }
};
