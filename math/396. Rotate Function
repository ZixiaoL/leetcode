Given an array of integers A and let n to be its length. 
Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow: 
F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].
Calculate the maximum value of F(0), F(1), ..., F(n-1). 
Note:
n is guaranteed to be less than 105. 

//自写错位法
class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        long sum = 0;
        long size = A.size();
        for(int i = 0; i < size; i++){
            sum += A[i];
        }
        long ans = 0;
        for(int j = 0; j < size; j++){
            ans += j*A[j];
        }
        long c = ans;
        for(int k = 0; k < A.size(); k++){
            c += sum-size*A[size-1-k];
            ans = max(ans, c);
        }
        return ans;
    }
};
