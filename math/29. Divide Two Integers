//Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.
//Return the quotient after dividing dividend by divisor.
//The integer division should truncate toward zero.

//
class Solution {
public:
    int divide(int dividend, int divisor) {
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX;
        }
        long dvd = labs(dividend), dvs = labs(divisor), ans = 0;
        int sign = dividend > 0 ^ divisor > 0 ? -1 : 1;
        while (dvd >= dvs) {
            long temp = dvs, m = 1;
            while (temp << 1 <= dvd) {
                temp <<= 1;
                m <<= 1;
            }
            dvd -= temp;
            ans += m;
        }
        return sign * ans;
    }
};
//
public class Solution {
    public int divide(int dividend, int divisor) {
        if (divisor==0) return Integer.MAX_VALUE;
        if (divisor==1 || dividend==0) return dividend;
        if (divisor==Integer.MIN_VALUE) {
            if (dividend==Integer.MIN_VALUE) return 1;
            else return 0;
        }
        if (dividend==Integer.MIN_VALUE) {
            if (divisor==1) return dividend;
            else if (divisor==-1) return Integer.MAX_VALUE;
            else return (((divisor&1)==1) ? divide(dividend+1,divisor):divide(dividend>>1,divisor>>1));
        }
        int res=0;
        int divid=Math.abs(dividend);
        int divis=Math.abs(divisor);
        while (divid>=divis){
            int temp=divis, multiple=1;
            while ((temp<<1)>=0 && (divid>=(temp<<1))) {
                temp <<= 1;
                multiple <<= 1;
            }
            divid -= temp;
            res += multiple;
        }
        return (dividend>0)^(divisor>0) ? -res:res;
    }
}
