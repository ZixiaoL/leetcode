Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

//自写
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if(m == 0)return 0;
        int n = grid[0].size();
        vector<vector<int>> v(m, vector<int> (n, 0));
        v[0][0] = grid[0][0];
        for(int i = 1; i < m; i++)v[i][0] = grid[i][0]+v[i-1][0];
        for(int j = 1; j < n; j++)v[0][j] = grid[0][j]+v[0][j-1];
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                v[i][j] = grid[i][j]+min(v[i-1][j], v[i][j-1]); 
            }
        }
        return v[m-1][n-1];
    }
};

//自改
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        if(m == 0)return 0;
        int n = grid[0].size();
        vector<int> v1(m, 0);
        vector<int> v2(n, INT_MAX);
        v1[0] = v2[0] = grid[0][0];
        for(int i = 1; i < m; i++)v1[i] = grid[i][0]+v1[i-1];
        for(int i = 0; i < m; i++){
            v2[0] = v1[i];
            for(int j = 1; j < n; j++){
                v2[j] = grid[i][j]+min(v2[j], v2[j-1]); 
            }
        }
        return v2[n-1];
    }
};
