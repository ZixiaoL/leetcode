//Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

//Approach 1: Revert half of the number
public class Solution {
    public bool IsPalindrome(int x) {
        // Special cases:
        // As discussed above, when x < 0, x is not a palindrome.
        // Also if the last digit of the number is 0, in order to be a palindrome,
        // the first digit of the number also needs to be 0.
        // Only 0 satisfy this property.
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        while(x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }

        // When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
        // For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
        // since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.
        return x == revertedNumber || x == revertedNumber/10;
    }
}

//自写
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0)return false;//负数肯定不是
        if(x==0)return true;//0肯定是
        int ans=0;
        int pop=0;
        int comp=x;
        while(x){
            pop=x%10;
            x/=10;
            if(ans>INT_MAX/10||ans==INT_MAX/10&&pop>7)return false;
            ans=ans*10+pop;
        }
        if(ans==comp)return true;
        else return false;
    }
};
