//Implement strStr().
//Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

//自写蛮力
class Solution {
public:
    int strStr(string haystack, string needle) {
        int size1=haystack.size();
        int size2=needle.size();
        if(size2==0)return 0;
        int j;
        for(int i=0;i<size1;i++){
            if(haystack[i]==needle[0]){
                for(j=0;j<size2;j++){
                    if(haystack[i+j]!=needle[j])break;
                }
                if(j==size2)return i;
            }
        }
        return -1;
    }
};

//KMP
//http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.size(), n = needle.size();
        if (!n) {
            return 0;
        }
        vector<int> lps = kmpProcess(needle);
        for (int i = 0, j = 0; i < m;) {
            if (haystack[i] == needle[j]) { 
                i++, j++;
            }
            if (j == n) {
                return i - j;
            }
            if (i < m && haystack[i] != needle[j]) {
                j ? j = lps[j - 1] : i++;
            }
        }
        return -1;
    }
private:
    vector<int> kmpProcess(string needle) {
        int n = needle.size();
        vector<int> lps(n, 0);
        for (int i = 1, len = 0; i < n;) {
            if (needle[i] == needle[len]) {
                lps[i++] = ++len;
            } else if (len) {
                len = lps[len - 1];
            } else {
                lps[i++] = 0;
            }
        }
        return lps;
    }
};
