//Given two strings s and t , write a function to determine if t is an anagram of s.

//Approach #1 (Sorting) [Accepted]
public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    char[] str1 = s.toCharArray();
    char[] str2 = t.toCharArray();
    Arrays.sort(str1);
    Arrays.sort(str2);
    return Arrays.equals(str1, str2);
}

//Approach #2 (Hash Table) [Accepted]
public boolean isAnagram(String s, String t) {
    if (s.length() != t.length()) {
        return false;
    }
    int[] counter = new int[26];
    for (int i = 0; i < s.length(); i++) {
        counter[s.charAt(i) - 'a']++;
        counter[t.charAt(i) - 'a']--;
    }
    for (int count : counter) {
        if (count != 0) {
            return false;
        }
    }
    return true;
}
//自写
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())return false;
        unordered_map<char,int> m;
        for(int i = 0; i < s.size(); i++){
            if(m.find(s[i]) != m.end())m[s[i]]++;
            else m[s[i]] = 1;
        }
        for(int i = 0; i < t.size(); i++){
            if(m.find(t[i]) == m.end())return false;
            else if(m[t[i]] != 0)m[t[i]]--;
            else return false;
        }        
        return true;
    }
};
