//Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.
//
class Solution {
 public:
    string digits[20] = {"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    string tens[10] = {"Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};

    string int2string(int n) {
        if (n >= 1000000000) {
            return int2string(n / 1000000000) + " Billion" + int2string(n % 1000000000);
        } else if (n >= 1000000) {
            return int2string(n / 1000000) + " Million" + int2string(n % 1000000);
        } else if (n >= 1000) {
            return int2string(n / 1000) + " Thousand" + int2string(n % 1000);
        } else if (n >= 100) {
            return int2string(n / 100) + " Hundred" + int2string(n % 100);
        } else if (n >= 20) {
            return  " " + tens[n / 10] + int2string(n % 10);
        } else if (n >= 1) {
            return " " + digits[n];
        } else {
            return "";
        }
    }

    string numberToWords(int num) {
        if (num == 0) {
            return "Zero";
        } else {
            string ret = int2string(num);
            return ret.substr(1, ret.length() - 1);
        }
    }
};

//
I only need one definition of numbers in the decreasing order:

vector<pair<int, string>> nums =
{
    {1000000000, "Billion"}, {1000000, "Million"}, {1000, "Thousand"}, {100, "Hundred"},
    {90, "Ninety"},{80, "Eighty"},{70, "Seventy"},{60, "Sixty"}, 
    {50, "Fifty"}, {40, "Forty"}, {30, "Thirty"}, {20, "Twenty"},
    {19, "Nineteen"}, {18, "Eighteen"}, {17, "Seventeen"}, {16, "Sixteen"}, {15, "Fifteen"},
    {14, "Fourteen"}, {13, "Thirteen"}, {12, "Twelve"}, {11, "Eleven"}, {10, "Ten"},
    {9, "Nine"},{8, "Eight"},{7, "Seven"},{6, "Six"}, {5, "Five"}, {4, "Four"}, {3, "Three"}, {2, "Two"}, {1, "One"}
};

The main function is fairly straightforward:

string numberToWords(int num) {
  if (num == 0) return "Zero";
  for (auto it = nums.begin(); ; ++it)
    if (num / it->first > 0)
      return (num >= 100 ? numberToWords(num / it->first) + " " : "") + it->second +
        (num % it->first == 0 ? "" : " " + numberToWords(num % it->first));
}
