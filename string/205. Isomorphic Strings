//Given two strings s and t, determine if they are isomorphic.
//Two strings are isomorphic if the characters in s can be replaced to get t.
//All occurrences of a character must be replaced with another character while preserving the order of characters. 
//No two characters may map to the same character but a character may map to itself.

//自写
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        unordered_map<char,char> m1;
        unordered_map<char,char> m2;
        for(int i = 0; i < s.size(); i++){
            if(m1.find(s[i]) == m1.end())m1[s[i]] = t[i];
            else if(m1[s[i]] != t[i])return false;
        }
        for(int i = 0; i < s.size(); i++){
            if(m2.find(t[i]) == m2.end())m2[t[i]] = s[i];
            else if(m2[t[i]] != s[i])return false;
        }        
        return true;
    }
};

//
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int m1[256] = {0}, m2[256] = {0}, n = s.size();
        for (int i = 0; i < n; ++i) {
            if (m1[s[i]] != m2[t[i]]) return false;
            m1[s[i]] = i + 1;
            m2[t[i]] = i + 1;
        }
        return true;
    }
};
