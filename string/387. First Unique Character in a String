//Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1. 

//自写蛮力
class Solution {
public:
    int firstUniqChar(string s) {
        int i;
        int j;
        for(i = 0; i < s.size(); i++){
            for(j = 0; j < s.size(); j++){
                if(i != j && s[j] == s[i])break;
            }
            if(j == s.size())return i;
        }
        return -1;
    }
};

//Approach 1: Linear time solution
Brute force solution, traverse string s 2 times. First time, store counts of every character into the hash table, second time, find the first character that appears only once.

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, int> m;
        for (auto &c : s) {
            m[c]++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (m[s[i]] == 1) return i;
        }
        return -1;
    }
};

if the string is extremely long, we wouldn't want to traverse it twice, so instead only storing just counts of a char, we also store the index, and then traverse the hash table.

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m;
        int idx = s.size();
        for (int i = 0; i < s.size(); i++) {
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        for (auto &p : m) {
            if (p.second.first == 1) idx = min(idx, p.second.second);
        }
        return idx == s.size() ? -1 : idx;
    }
};
