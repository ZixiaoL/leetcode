//Given a string s, partition s such that every substring of the partition is a palindrome.
//Return all possible palindrome partitioning of s.

//自写revursive
class Solution {
public:
    bool isPalindrome(string s){
        int i = 0;
        int j = s.size()-1;
        while(i < j){
            if(s[i++] != s[j--])return false;
        }
        return true;
    }    
    void helper(string s, vector<string> &temp, vector<vector<string>> &ans){
        for(int i = 0; i < s.size(); i++){
            if(isPalindrome(s.substr(0,i+1))){
                temp.push_back(s.substr(0,i+1));
                if(i == s.size()-1)ans.push_back(temp);
                helper(s.substr(i+1), temp, ans);
                temp.pop_back();
            }
        }
        
    }    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        helper(s, temp, ans);    
        return ans;
    }
};
