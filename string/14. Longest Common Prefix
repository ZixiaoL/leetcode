//Write a function to find the longest common prefix string amongst an array of strings.
//If there is no common prefix, return an empty string "".

//Approach 1: Horizontal scanning
 public String longestCommonPrefix(String[] strs) {
    if (strs.length == 0) return "";
    String prefix = strs[0];
    for (int i = 1; i < strs.length; i++)
        while (strs[i].indexOf(prefix) != 0) {
            prefix = prefix.substring(0, prefix.length() - 1);
            if (prefix.isEmpty()) return "";
        }        
    return prefix;
}

//Approach 2: Vertical scanning
public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";
    for (int i = 0; i < strs[0].length() ; i++){
        char c = strs[0].charAt(i);
        for (int j = 1; j < strs.length; j ++) {
            if (i == strs[j].length() || strs[j].charAt(i) != c)
                return strs[0].substring(0, i);             
        }
    }
    return strs[0];
}

//Approach 3: Divide and conquer
public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";    
        return longestCommonPrefix(strs, 0 , strs.length - 1);
}

private String longestCommonPrefix(String[] strs, int l, int r) {
    if (l == r) {
        return strs[l];
    }
    else {
        int mid = (l + r)/2;
        String lcpLeft =   longestCommonPrefix(strs, l , mid);
        String lcpRight =  longestCommonPrefix(strs, mid + 1,r);
        return commonPrefix(lcpLeft, lcpRight);
   }
}

String commonPrefix(String left,String right) {
    int min = Math.min(left.length(), right.length());       
    for (int i = 0; i < min; i++) {
        if ( left.charAt(i) != right.charAt(i) )
            return left.substring(0, i);
    }
    return left.substring(0, min);
}

//Approach 4: Binary search自写
class Solution {
public:
    bool isCommonPrefix(vector<string>& strs,string str){
        for(int i=0;i<strs.size();i++){
            if(!(strs[i].substr(0,str.size())==str))return false;
        }
        return true;
    }
    string longestCommonPrefix(vector<string>& strs) {
        int minstring=INT_MAX;
        int j;
        string ans="";
        if(strs.size()==0)return ans;
        for(int i=0;i<strs.size();i++){
            if(minstring>=strs[i].size()){
                j=i;
                minstring=strs[i].size();
            }
        }
        int lo=0;
        int hi=strs[j].size()-1;
        int mid=lo+hi>>1;
        while(lo<=hi){
        if(isCommonPrefix(strs,strs[j].substr(0,mid+1))){
            ans+=strs[j].substr(lo,mid-lo+1);
            lo=mid+1;
            mid=lo+hi>>1;
        }
        else{
            hi=mid-1;
            mid=lo+hi>>1;
        }
        }
        return ans;
    }
};
