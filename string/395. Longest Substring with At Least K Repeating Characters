//Find the length of the longest substring T of 
//a given string (consists of lowercase letters only) such that every character in T appears no less than k times. 

//自写蛮力(5.52%)
class Solution {
public:
    int longestSubstring(string s, int k) {
        int ans = 0;
        for(int i = 0; i < s.size(); i++){
            vector<int> v(26,0);
            for(int j = i; j < s.size(); j++){
                v[s[j]-'a']++;
                int l;
                for(l = 0; l < 26; l++){
                    if(v[l] != 0 && v[l] < k)break;
                }
                if(l == 26)ans = max(ans, j-i+1);
            }
        }
        return ans;
    }
};

//recursive
    int longestSubstring(string s, int k) {
        if(s.size() == 0 || k > s.size())   return 0;
        if(k == 0)  return s.size();
        
        unordered_map<char,int> Map;
        for(int i = 0; i < s.size(); i++){
            Map[s[i]]++;
        }
        
        int idx =0;
        while(idx <s.size() && Map[s[idx]] >= k)    idx++;
        if(idx == s.size()) return s.size();
        
        int left = longestSubstring(s.substr(0 , idx) , k);
        int right = longestSubstring(s.substr(idx+1) , k);
        
        return max(left, right);
        
    }
    
//The idea is that if a locally longest substr is found, there's no need to check substrs overlapping it.
