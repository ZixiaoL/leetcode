Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5
Note:
Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

//自写
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head)return head;
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* cur = dummy;
        ListNode* tail = dummy;
        for(int i = 0; i < k; i++){
            if(tail)tail = tail->next;
        }
        while(tail){
            cur = helper(cur, k, tail);
        }
        return dummy->next;
    }
    ListNode* helper(ListNode* &head, int k, ListNode* &tail){
        if(!head->next || !head->next->next){
            tail = NULL;
            return NULL;
        }
        ListNode* pre = head->next;
        ListNode* cur = head->next->next;
        while(--k && cur){
            pre->next = cur->next;
            cur->next = head->next;
            head->next = cur;
            cur = pre->next;
            if(tail)tail = tail->next;
        }
        if(tail)tail = tail->next;
        return pre;
    }
};

//其实可以不用传tail，先计算出总长度就知道要循环多少次了
