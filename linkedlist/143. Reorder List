Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
You may not modify the values in the list's nodes, only nodes itself may be changed.

//找了个跟自己想法一样的 懒得写了
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode *head) {
        if(head == NULL || head->next == NULL || head->next->next==NULL)
            return;
        //find the middle of the list, and split into two lists.    
        ListNode *p=head,*q=head;
        while(p && q && q->next && q->next->next){
            p=p->next;
            q=q->next->next;
        }
        
        ListNode *mid = p->next;
        p->next=NULL;
        p=head;
        //reverse from the middle to the end
        ListNode *q1=mid, *q2,*q3;
        if(mid->next){
            q1=mid;
            q2=mid->next;
            while(q2){
                q3=q2->next;
                q2->next=q1;
                q1=q2;
                q2=q3;
                
            }
            mid->next=NULL;
        }
        q=q1;
        //merge these two list
        ListNode *s=p;
        p=p->next;
        while(p && q){
           s->next=q;
           s=s->next;
           q=q->next;
           
           s->next=p;
           s=s->next;
           p=p->next;
        }
        if(p){
            s->next=p;
        }
        if(q){
            s->next=q;
        }
    }
};


//或者
class Solution {
public:
    void reorderList(ListNode *head) {
  // use fast/slow points to find the second half of the list       
            ListNode *head1, *head2;
            ListNode *preNode, *curNode;
            
            if(!head || !(head->next) )
            {// if the list is empty or only has one element
                return;
            }
            else
            {
                head1 = head;
                head2 = head->next;
                
                // find the starting point of the second half
                while(head2 && head2->next)
                {
                    head1 = head1->next;
                    head2 = (head2->next)->next;
                }
                
                //reverse the second half
                head2 =head1->next; // the head of the second half
                head1->next =NULL;
                preNode = NULL;
                
                while(head2)
                {
                    curNode = head2->next;
                    head2->next = preNode;
                    preNode= head2;
                    head2 = curNode;
                }
                
                // merge the first half and the reversed second half
                head2 = preNode;
                head1 = head;
                
                while(head2)
                {
                    curNode = head1->next;
                    head1 = head1->next = head2;
                    head2 = curNode;
                }
                
                return;
            }
        }
        
//递归
https://leetcode.com/problems/reorder-list/discuss/45113/Share-a-consise-recursive-solution-in-C%2B%2B
