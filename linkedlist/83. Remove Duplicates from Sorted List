//Given a sorted linked list, delete all duplicates such that each element appear only once.

//
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* cmp=head;
        while(cmp!=NULL&&cmp->next!=NULL){
            while(cmp->next!=NULL&&cmp->next->val==cmp->val)cmp->next=cmp->next->next;
            cmp=cmp->next;
        }
        return head;
    }
};

//Approach 1: Straight-Forward Approach
public ListNode deleteDuplicates(ListNode head) {
    ListNode current = head;
    while (current != null && current.next != null) {
        if (current.next.val == current.val) {
            current.next = current.next.next;
        } else {
            current = current.next;
        }
    }
    return head;
}
