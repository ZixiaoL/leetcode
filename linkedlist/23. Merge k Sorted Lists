//Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

//自写7.75%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int minindex;
        int minval;
        ListNode* dummy = new ListNode(0);
        ListNode* tail = dummy;
        bool end = false;
        while(!end){
            end = true;
            minindex = -1;
            minval = INT_MAX;
            for(int i = 0; i < lists.size(); i++){
                if(lists[i]){
                    end = false;
                    if(lists[i]->val <= minval){
                        minval = lists[i]->val;
                        minindex = i;
                    }
                }
            }
            if(!end){
                tail->next = lists[minindex];
                tail = tail->next;
                lists[minindex] = lists[minindex]->next;
            }
        }
        return dummy->next;
    }
};

//Approach 1: Brute Force
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        self.nodes = []
        head = point = ListNode(0)
        for l in lists:
            while l:
                self.nodes.append(l.val)
                l = l.next
        for x in sorted(self.nodes):
            point.next = ListNode(x)
            point = point.next
        return head.next
        
//Approach 2: Compare one by one
//Approach 3: Optimize Approach 2 by Priority Queue
from Queue import PriorityQueue

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        head = point = ListNode(0)
        q = PriorityQueue()
        for l in lists:
            if l:
                q.put((l.val, l))
        while not q.empty():
            val, node = q.get()
            point.next = ListNode(val)
            point = point.next
            node = node.next
            if node:
                q.put((node.val, node))
        return head.next
   
//Approach 4: Merge lists one by one
//Approach 5: Merge with Divide And Conquer
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        amount = len(lists)
        interval = 1
        while interval < amount:
            for i in range(0, amount - interval, interval * 2):
                lists[i] = self.merge2Lists(lists[i], lists[i + interval])
            interval *= 2
        return lists[0] if amount > 0 else lists

    def merge2Lists(self, l1, l2):
        head = point = ListNode(0)
        while l1 and l2:
            if l1.val <= l2.val:
                point.next = l1
                l1 = l1.next
            else:
                point.next = l2
                l2 = l1
                l1 = point.next.next
            point = point.next
        if not l1:
            point.next=l2
        else:
            point.next=l1
        return head.next
