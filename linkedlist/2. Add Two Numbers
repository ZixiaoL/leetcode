You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

//
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {//返回指向答案节点的指针，参数为指向问题结点指针
        ListNode* head=new ListNode(0);
        ListNode* ans=head;
        bool jin=false;//初始化进位标志=0
        int a;
        while (l1 != NULL || l2 != NULL) {
            if (l1 != NULL && l2 != NULL) {
                a = l1->val + l2->val + jin;
            l1=l1->next;
            l2=l2->next;
            } else if (l1 != NULL) {
                a = l1->val + jin;
                l1=l1->next;
            } else if (l2 != NULL) {
                a = l2->val + jin;
                l2=l2->next;
            }
            if(a<10)jin=false;
            else {
                jin=true;
                a=a-10;
            }
            head->next=new ListNode(a);
            head=head->next;
        }
        if (jin==true)
            head->next=new ListNode(1);
        return ans->next;//返回答案的地址
    }
};

//Approach 1: Elementary Math
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}
